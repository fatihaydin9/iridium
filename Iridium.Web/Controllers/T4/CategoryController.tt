<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="C:\Users\Fatih Aydin\.nuget\packages\humanizer.core\2.14.1\lib\netstandard2.0\Humanizer.dll" #> 
<#@ import namespace="Humanizer" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
    string entityName = "Category"; 
    string pluralEntityName = entityName.Pluralize(inputIsKnownToBeSingular: true); 
#>
using Iridium.Application.CQRS.Categories.Commands.Delete<#= entityName #>;
using Iridium.Application.CQRS.Categories.Commands.Insert<#= entityName #>;
using Iridium.Application.CQRS.Categories.Commands.Update<#= entityName #>;
using Iridium.Application.CQRS.Categories.Queries;
using Iridium.Domain.Common;
using Iridium.Domain.Roles;
using Iridium.Infrastructure.Models;
using Iridium.Infrastructure.Utilities;
using Iridium.Web.Controllers.Base;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;

namespace Iridium.Web.Controllers {

    public class <#= entityName #>Controller : ApiControllerBase
    {
    
        [AllowAnonymous]
        [HttpGet("Template")]
        public ActionResult<TemplateModel> Template()
        {
            var templateModel = new TemplateModel()
            {
                FormComponents = AttributeHelper.GetDtoFormComponents<<#= entityName #>BriefDto>(),
                EndpointSettings = AttributeHelper.GetDtoEndPointSettings<<#= entityName #>BriefDto>()
            };

            return templateModel;
        }

        [AllowAnonymous]
        [HttpGet("Dropdown")]
        public async Task<ActionResult<List<KeyValueDto<long, string>>>> Dropdown()
        {
            var list = await List(new Get<#= pluralEntityName #>Query());

            if (list == null || list.Value == null)
                return new ActionResult<List<KeyValueDto<long, string>>>(new List<KeyValueDto<long, string>>());

            List<KeyValueDto<long, string>> dropDownList = DtoMapper.MapToKeyValueDtoList(list.Value, d => d.Id, d => d.Name);

            return dropDownList;
        }

        [HttpGet("Get")]
        [IridiumAuthorize(<#= entityName #>Role.Read)]
        public async Task<ActionResult<<#= entityName #>BriefDto>> Get([FromQuery] Get<#= entityName #>ByIdQuery query)
        {
            return await Mediator.Send(query);
        }

        [HttpGet("List")]
        [IridiumAuthorize(<#= entityName #>Role.Read)]
        public async Task<ActionResult<List<<#= entityName #>BriefDto>>> List([FromQuery] Get<#= pluralEntityName #>Query query)
        {
            return await Mediator.Send(query);
        }

        [HttpPost("PaginatedList")]
        [IridiumAuthorize(<#= entityName #>Role.Read)]
        public async Task<ActionResult<PaginatedList<<#= entityName #>BriefDto>>> PaginatedList([FromQuery] Get<#= pluralEntityName #>WithPaginationQuery query)
        {
            return await Mediator.Send(query);
        }

        [HttpPost("Insert")]
        [IridiumAuthorize(<#= entityName #>Role.Insert)]
        public async Task<ActionResult<long>> Insert([FromBody] Insert<#= entityName #>Command command)
        {
            return await Mediator.Send(command);
        }

        [HttpPost("Update")]
        [IridiumAuthorize(<#= entityName #>Role.Update)]
        public async Task<IActionResult> Update([FromBody] Update<#= entityName #>Command command)
        {
            await Mediator.Send(command);
            return Ok();
        }

        [HttpPost("Delete")]
        [IridiumAuthorize(<#= entityName #>Role.Delete)]
        public async Task<IActionResult> Delete(int id)
        {
            await Mediator.Send(new Delete<#= entityName #>Command(id));
            return Ok();
        }


    }


}